/** Declaration file generated by dts-gen */

export = agentkeepalive;

declare class agentkeepalive {
    constructor(...args: any[]);

    createConnection(...args: any[]): void;

    getCurrentStatus(...args: any[]): void;

    keepSocketAlive(...args: any[]): void;

    reuseSocket(...args: any[]): void;

    static captureRejectionSymbol: any;

    static captureRejections: boolean;

    static constants: {
        CREATE_HTTPS_CONNECTION: any;
        CREATE_ID: any;
        CURRENT_ID: any;
        INIT_SOCKET: any;
        SOCKET_CREATED_TIME: any;
        SOCKET_NAME: any;
        SOCKET_REQUEST_COUNT: any;
        SOCKET_REQUEST_FINISHED_COUNT: any;
    };

    static defaultMaxListeners: number;

    static defaultMaxSockets: number;

    static errorMonitor: any;

    static init(opts: any): void;

    static listenerCount(emitter: any, type: any): any;

    static on(emitter: any, event: any): any;

    static once(emitter: any, name: any): any;

    static usingDomains: boolean;

}

declare namespace agentkeepalive {
    class EventEmitter {
        constructor(opts: any);

        addListener(type: any, listener: any): any;

        emit(type: any, args: any): any;

        eventNames(): any;

        getMaxListeners(): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        off(type: any, listener: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any): any;

        prependListener(type: any, listener: any): any;

        prependOnceListener(type: any, listener: any): any;

        rawListeners(type: any): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static init(opts: any): void;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

    class HttpsAgent {
        constructor(...args: any[]);

        createConnection(...args: any[]): void;

        getName(options: any): any;

        static HttpsAgent: any;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static constants: {
            CREATE_HTTPS_CONNECTION: any;
            CREATE_ID: any;
            CURRENT_ID: any;
            INIT_SOCKET: any;
            SOCKET_CREATED_TIME: any;
            SOCKET_NAME: any;
            SOCKET_REQUEST_COUNT: any;
            SOCKET_REQUEST_FINISHED_COUNT: any;
        };

        static defaultMaxListeners: number;

        static defaultMaxSockets: number;

        static errorMonitor: any;

        static init(opts: any): void;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

    namespace HttpsAgent {
        class EventEmitter {
            constructor(opts: any);

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static captureRejectionSymbol: any;

            static captureRejections: boolean;

            static defaultMaxListeners: number;

            static errorMonitor: any;

            static init(opts: any): void;

            static listenerCount(emitter: any, type: any): any;

            static on(emitter: any, event: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

    }

}

